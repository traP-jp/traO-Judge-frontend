/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { SubmissionSummaries } from './SubmissionSummaries';
import {
    SubmissionSummariesFromJSON,
    SubmissionSummariesFromJSONTyped,
    SubmissionSummariesToJSON,
    SubmissionSummariesToJSONTyped,
} from './SubmissionSummaries';
import type { ProblemSummaries } from './ProblemSummaries';
import {
    ProblemSummariesFromJSON,
    ProblemSummariesFromJSONTyped,
    ProblemSummariesToJSON,
    ProblemSummariesToJSONTyped,
} from './ProblemSummaries';

/**
 * ユーザー情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * traQのID
     * @type {string}
     * @memberof User
     */
    traqId?: string;
    /**
     * GitHubのID
     * @type {string}
     * @memberof User
     */
    githubId?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    iconUrl?: string;
    /**
     * 
     * @type {ProblemSummaries}
     * @memberof User
     */
    postProblems?: ProblemSummaries;
    /**
     * 
     * @type {SubmissionSummaries}
     * @memberof User
     */
    submitProblems?: SubmissionSummaries;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    xLink?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    githubLink?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    selfIntroduction?: string;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    role: Role;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'traqId': json['traqId'] == null ? undefined : json['traqId'],
        'githubId': json['githubId'] == null ? undefined : json['githubId'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'postProblems': json['postProblems'] == null ? undefined : ProblemSummariesFromJSON(json['postProblems']),
        'submitProblems': json['submitProblems'] == null ? undefined : SubmissionSummariesFromJSON(json['submitProblems']),
        'xLink': json['xLink'] == null ? undefined : json['xLink'],
        'githubLink': json['githubLink'] == null ? undefined : json['githubLink'],
        'selfIntroduction': json['selfIntroduction'] == null ? undefined : json['selfIntroduction'],
        'role': RoleFromJSON(json['role']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

  export function UserToJSON(json: any): User {
      return UserToJSONTyped(json, false);
  }

  export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'traqId': value['traqId'],
        'githubId': value['githubId'],
        'iconUrl': value['iconUrl'],
        'postProblems': ProblemSummariesToJSON(value['postProblems']),
        'submitProblems': SubmissionSummariesToJSON(value['submitProblems']),
        'xLink': value['xLink'],
        'githubLink': value['githubLink'],
        'selfIntroduction': value['selfIntroduction'],
        'role': RoleToJSON(value['role']),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

