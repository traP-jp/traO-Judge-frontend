/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestcaseSummaries } from './TestcaseSummaries';
import {
    TestcaseSummariesFromJSON,
    TestcaseSummariesFromJSONTyped,
    TestcaseSummariesToJSON,
    TestcaseSummariesToJSONTyped,
} from './TestcaseSummaries';

/**
 * 問題の詳細
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * 問題ID
     * @type {string}
     * @memberof Problem
     */
    id: string;
    /**
     * 問題タイトル
     * @type {string}
     * @memberof Problem
     */
    title: string;
    /**
     * 作問者のユーザーID
     * @type {number}
     * @memberof Problem
     */
    authorId: number;
    /**
     * 問題が全体公開かどうか.
     * 
     * * `true` - 公開
     * * `false` - 非公開 (問題の作者のみ閲覧可)
     * @type {boolean}
     * @memberof Problem
     */
    isPublic: boolean;
    /**
     * 難易度
     * @type {number}
     * @memberof Problem
     */
    difficulty: number;
    /**
     * 問題文 (HTML形式)
     * @type {string}
     * @memberof Problem
     */
    statement: string;
    /**
     * 実行時間制限 (ms)
     * @type {number}
     * @memberof Problem
     */
    timeLimit: number;
    /**
     * メモリ制限 (MiB)
     * @type {number}
     * @memberof Problem
     */
    memoryLimit: number;
    /**
     * 
     * @type {number}
     * @memberof Problem
     */
    solvedCount: number;
    /**
     * 
     * @type {Array<TestcaseSummaries>}
     * @memberof Problem
     */
    testcases: Array<TestcaseSummaries>;
    /**
     * 
     * @type {Date}
     * @memberof Problem
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Problem
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Problem interface.
 */
export function instanceOfProblem(value: object): value is Problem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('authorId' in value) || value['authorId'] === undefined) return false;
    if (!('isPublic' in value) || value['isPublic'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    if (!('statement' in value) || value['statement'] === undefined) return false;
    if (!('timeLimit' in value) || value['timeLimit'] === undefined) return false;
    if (!('memoryLimit' in value) || value['memoryLimit'] === undefined) return false;
    if (!('solvedCount' in value) || value['solvedCount'] === undefined) return false;
    if (!('testcases' in value) || value['testcases'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ProblemFromJSON(json: any): Problem {
    return ProblemFromJSONTyped(json, false);
}

export function ProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Problem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'authorId': json['authorId'],
        'isPublic': json['isPublic'],
        'difficulty': json['difficulty'],
        'statement': json['statement'],
        'timeLimit': json['timeLimit'],
        'memoryLimit': json['memoryLimit'],
        'solvedCount': json['solvedCount'],
        'testcases': ((json['testcases'] as Array<any>).map(TestcaseSummariesFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

  export function ProblemToJSON(json: any): Problem {
      return ProblemToJSONTyped(json, false);
  }

  export function ProblemToJSONTyped(value?: Problem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'authorId': value['authorId'],
        'isPublic': value['isPublic'],
        'difficulty': value['difficulty'],
        'statement': value['statement'],
        'timeLimit': value['timeLimit'],
        'memoryLimit': value['memoryLimit'],
        'solvedCount': value['solvedCount'],
        'testcases': ((value['testcases'] as Array<any>).map(TestcaseSummariesToJSON)),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

