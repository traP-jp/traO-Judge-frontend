/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JudgeStatus } from './JudgeStatus';
import {
    JudgeStatusFromJSON,
    JudgeStatusFromJSONTyped,
    JudgeStatusToJSON,
    JudgeStatusToJSONTyped,
} from './JudgeStatus';

/**
 * 提出
 * @export
 * @interface SubmissionSummary
 */
export interface SubmissionSummary {
    /**
     * 提出ID
     * @type {string}
     * @memberof SubmissionSummary
     */
    id: string;
    /**
     * 問題ID
     * @type {number}
     * @memberof SubmissionSummary
     */
    problemId: number;
    /**
     * 提出ユーザーID
     * @type {number}
     * @memberof SubmissionSummary
     */
    userId: number;
    /**
     * 
     * @type {string}
     * @memberof SubmissionSummary
     */
    userName: string;
    /**
     * 提出日時
     * @type {Date}
     * @memberof SubmissionSummary
     */
    submittedAt: Date;
    /**
     * 提出コードの言語ID
     * @type {number}
     * @memberof SubmissionSummary
     */
    languageId: number;
    /**
     * スコアの合計
     * @type {number}
     * @memberof SubmissionSummary
     */
    totalScore: number;
    /**
     * 実行時間の最大値 (ms)
     * @type {number}
     * @memberof SubmissionSummary
     */
    maxTime: number;
    /**
     * メモリ使用量の最大値 (MiB)
     * @type {number}
     * @memberof SubmissionSummary
     */
    maxMemory: number;
    /**
     * 
     * @type {number}
     * @memberof SubmissionSummary
     */
    codeLength: number;
    /**
     * 
     * @type {JudgeStatus}
     * @memberof SubmissionSummary
     */
    judgeStatus: JudgeStatus;
}



/**
 * Check if a given object implements the SubmissionSummary interface.
 */
export function instanceOfSubmissionSummary(value: object): value is SubmissionSummary {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('problemId' in value) || value['problemId'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userName' in value) || value['userName'] === undefined) return false;
    if (!('submittedAt' in value) || value['submittedAt'] === undefined) return false;
    if (!('languageId' in value) || value['languageId'] === undefined) return false;
    if (!('totalScore' in value) || value['totalScore'] === undefined) return false;
    if (!('maxTime' in value) || value['maxTime'] === undefined) return false;
    if (!('maxMemory' in value) || value['maxMemory'] === undefined) return false;
    if (!('codeLength' in value) || value['codeLength'] === undefined) return false;
    if (!('judgeStatus' in value) || value['judgeStatus'] === undefined) return false;
    return true;
}

export function SubmissionSummaryFromJSON(json: any): SubmissionSummary {
    return SubmissionSummaryFromJSONTyped(json, false);
}

export function SubmissionSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmissionSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'problemId': json['problemId'],
        'userId': json['userId'],
        'userName': json['userName'],
        'submittedAt': (new Date(json['submittedAt'])),
        'languageId': json['languageId'],
        'totalScore': json['totalScore'],
        'maxTime': json['maxTime'],
        'maxMemory': json['maxMemory'],
        'codeLength': json['codeLength'],
        'judgeStatus': JudgeStatusFromJSON(json['judgeStatus']),
    };
}

  export function SubmissionSummaryToJSON(json: any): SubmissionSummary {
      return SubmissionSummaryToJSONTyped(json, false);
  }

  export function SubmissionSummaryToJSONTyped(value?: SubmissionSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'problemId': value['problemId'],
        'userId': value['userId'],
        'userName': value['userName'],
        'submittedAt': ((value['submittedAt']).toISOString()),
        'languageId': value['languageId'],
        'totalScore': value['totalScore'],
        'maxTime': value['maxTime'],
        'maxMemory': value['maxMemory'],
        'codeLength': value['codeLength'],
        'judgeStatus': JudgeStatusToJSON(value['judgeStatus']),
    };
}

