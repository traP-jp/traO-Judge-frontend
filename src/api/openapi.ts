/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/editorials/{editorialId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 解説ID */
                editorialId: components["parameters"]["editorialIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getEditorial
         * @description 個別の解説を取得する
         */
        get: operations["getEditorial"];
        /**
         * putEditorial
         * @description 個別の解説を変更する
         */
        put: operations["putEditorial"];
        post?: never;
        /**
         * deleteEditorial
         * @description 個別の解説を削除する
         */
        delete: operations["deleteEditorial"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testcases/{testcaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テストケースID */
                testcaseId: components["parameters"]["testcaseIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getTestcase
         * @description あるidのテストケースを取得
         */
        get: operations["getTestcase"];
        /**
         * putTestcase
         * @description 単体のテストケースの編集
         */
        put: operations["putTestcase"];
        post?: never;
        /**
         * deleteTestcase
         * @description 単一のテストケースの削除
         */
        delete: operations["deleteTestcase"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getProblems
         * @description 問題一覧を取得する
         */
        get: operations["getProblems"];
        put?: never;
        /**
         * postProblem
         * @description 問題を新規作成・投稿する
         *     このとき作成された問題は必ず非公開になる
         *     公開する場合は PUT で変更する必要がある
         */
        post: operations["postProblem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problemId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getProblem
         * @description 個別の問題を取得する
         */
        get: operations["getProblem"];
        /**
         * putProblem
         * @description 問題を修正する
         */
        put: operations["putProblem"];
        post?: never;
        /**
         * deleteProblem
         * @description 問題を削除する
         */
        delete: operations["deleteProblem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problemId}/editorials": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getEditorialsOnProblem
         * @description ある問題の全ての解説を取得する
         */
        get: operations["getEditorialsOnProblem"];
        put?: never;
        /**
         * postEditorial
         * @description 解説を投稿する
         */
        post: operations["postEditorial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problemId}/testcases": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getTestcases
         * @description 全てのテストケースを取得
         */
        get: operations["getTestcases"];
        put?: never;
        /**
         * postTestcases
         * @description テストケースを投稿する
         */
        post: operations["postTestcases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/problems/{problemId}/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postSubmission
         * @description ソースコードを提出する
         */
        post: operations["postSubmission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getSubmissions
         * @description 全ての提出を取得
         */
        get: operations["getSubmissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/submissions/{submissionId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 提出ID */
                submissionId: components["parameters"]["submissionIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getSubmission
         * @description 個別の提出を取得する
         */
        get: operations["getSubmission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーID */
                userId: components["parameters"]["userIdInPath"];
            };
            cookie?: never;
        };
        /**
         * getUser
         * @description 個別のユーザー情報を取得する
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getMe
         * @description 自身の情報を取得する
         */
        get: operations["getMe"];
        /**
         * putMe
         * @description アイコンなど自身に関連する情報の編集をします
         */
        put: operations["putUsersMeIcon"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * putMeEmail
         * @description メール情報を書き換える メール情報を書き換えた後はメール認証が必要である
         */
        put: operations["putMeEmail"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * putUserMePassword
         * @description ログイン後にパスワードを変更する
         */
        put: operations["putUsersMePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signup/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postSignupRequest
         * @description メールアドレスを渡し，そこに認証用のリンクを送る。
         */
        post: operations["postSignupRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postSignup
         * @description email+passwordによるユーザー登録
         *     クエリパラメタにtokenを持ち，それでメール情報を管理する
         *     リクエストを受け取ったら`/activate?payload=JWT`のような形式のメール有効化用エンドポイントを含むメールをバックエンドからユーザーに送る。
         *     ユーザーがそのアドレスをクリックしたら，メール有効化処理をし，適切に終了したらログイン画面にリダイレクトする。
         */
        post: operations["postSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postLogin
         * @description ログイン
         */
        post: operations["postLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postLogout
         * @description ログアウト
         */
        post: operations["postLogout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reset-password/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postResetPasswordReset
         * @description パスワード変更のリクエスト
         *     リクエストを受け取ったら`/reset-password?token=JWT`のような形式のエンドポイントを含むメールをバックエンドからユーザーに送る。
         *     ユーザーがそれをクリックするとリセット用画面に遷移する。
         */
        post: operations["postRequestResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postResetPassword
         * @description 新しいパスワードをPOSTする
         */
        post: operations["postResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getActivateEmailAddress
         * @description メールアドレスの有効化
         */
        get: operations["getActivate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-oauth2/params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getGoogleOAuth2Params
         * @description GoogleOAuthのためのエンドポイント
         */
        get: operations["getGoogleAuthParams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/github-oauth2/params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getGithubOAuth2Params
         * @description GitHubOAuthのためのエンドポイント
         */
        get: operations["getgithubAuthParams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/traq-oauth2/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postTraqOAuth2Revoke
         * @description traQOAuthのトークンを削除する
         */
        post: operations["revokeTraqAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-oauth2/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postGoogleOAuth2Revoke
         * @description GoogleOAuthのトークンを削除する
         */
        post: operations["revokeGoogleAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/github-oauth2/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * postGithubOAuth2Revoke
         * @description GithubOAuthのトークンを削除する
         */
        post: operations["revokeGithubAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getLanguages
         * @description 使用できる言語の一覧
         */
        get: operations["getLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Problem
         * @description 問題の詳細
         */
        Problem: {
            /** @description 問題ID */
            id: string;
            /** @description 問題タイトル */
            title: string;
            /** @description 作問者のユーザーID */
            authorId: number;
            /** @description 問題が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic: boolean;
            /** @description 難易度 */
            difficulty: number;
            /** @description 問題文 (HTML形式) */
            statement: string;
            /** @description 実行時間制限 (ms) */
            timeLimit: number;
            /** @description メモリ制限 (MiB) */
            memoryLimit: number;
            solvedCount: number;
            testcases: components["schemas"]["TestcaseSummaries"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /**
         * ProblemSummary
         * @description 問題の要約
         */
        ProblemSummary: {
            /** @description 問題ID */
            id: string;
            /** @description 問題タイトル */
            title: string;
            /** @description 作問者のユーザーID */
            authorId: number;
            /** @description 問題が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic: boolean;
            /** @description 難易度 */
            difficulty: number;
            /** @description 実行時間制限 (ms) */
            timeLimit: number;
            /** @description メモリ制限 (MiB) */
            memoryLimit: number;
            solvedCount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** Problems */
        ProblemSummaries: {
            total: number;
            problems: components["schemas"]["ProblemSummary"][];
        };
        /**
         * PostProblemRequest
         * @description 問題の投稿リクエスト
         */
        PostProblemRequest: {
            /** @description 問題タイトル */
            title: string;
            /** @description 難易度 */
            difficulty: number;
            /** @description 問題文 (HTML形式) */
            statement: string;
            /** @description 実行時間制限 (ms) */
            timeLimit: number;
            /** @description メモリ制限 (MiB) */
            memoryLimit: number;
        };
        /**
         * PutProblemRequest
         * @description 問題の変更リクエスト
         */
        PutProblemRequest: {
            /** @description 問題タイトル */
            title: string;
            /** @description 問題が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic: boolean;
            /** @description 難易度 */
            difficulty: number;
            /** @description 問題文 (HTML形式) */
            statement?: string;
            /** @description 実行時間制限 (ms) */
            timeLimit: number;
            /** @description メモリ制限 (MiB) */
            memoryLimit: number;
        };
        /**
         * User
         * @description ユーザー情報
         */
        User: {
            /** @description ユーザーID */
            id: string;
            /** @description ユーザー名 */
            name: string;
            /** @description traQのID */
            traqId?: string;
            /** @description GitHubのID */
            githubId?: string;
            iconUrl?: string;
            postProblems?: components["schemas"]["ProblemSummaries"];
            submitProblems?: components["schemas"]["SubmissionSummaries"];
            xLink?: string;
            githubLink?: string;
            selfIntroduction?: string;
            role: components["schemas"]["Role"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** PutMeRequest */
        PutMeRequest: {
            userName?: string;
            /** Format: binary */
            icon?: string;
            xLink?: string;
            githubLink?: string;
            selfIntroduction?: string;
        };
        /**
         * PutPasswordRequest
         * @description ログイン後のパスワード変更用
         */
        PutPasswordRequest: {
            /** Format: password */
            oldPassword: string;
            /** Format: password */
            newPassword: string;
        };
        /**
         * SubmissionSummary
         * @description 提出
         */
        SubmissionSummary: {
            /** @description 提出ID */
            id: string;
            /** @description 問題ID */
            problemId: number;
            /** @description 提出ユーザーID */
            userId: number;
            userName: string;
            /**
             * Format: date-time
             * @description 提出日時
             */
            submittedAt: string;
            /** @description 提出コードの言語ID */
            languageId: number;
            /** @description スコアの合計 */
            totalScore: number;
            /** @description 実行時間の最大値 (ms) */
            maxTime: number;
            /** @description メモリ使用量の最大値 (MiB) */
            maxMemory: number;
            codeLength: number;
            judgeStatus: components["schemas"]["JudgeStatus"];
        };
        /**
         * SubmissionSummaries
         * @description 提出一覧
         */
        SubmissionSummaries: {
            total?: number;
            problems?: components["schemas"]["SubmissionSummary"][];
        };
        /**
         * Submission
         * @description 提出の詳細
         */
        Submission: {
            /** @description 提出ID */
            id: string;
            /** @description 提出ユーザーID */
            userId: number;
            userName: string;
            /** @description 問題ID */
            problemId: number;
            /**
             * Format: date-time
             * @description 提出日時
             */
            submittedAt: string;
            /** @description 提出コードの言語ID */
            languageId: number;
            /** @description スコアの合計 */
            totalScore: number;
            /** @description 実行時間の最大値 (ms) */
            maxTime: number;
            /** @description メモリ使用量の最大値 (MiB) */
            maxMemory: number;
            codeLength?: number;
            overallJudgeStatus?: components["schemas"]["JudgeStatus"];
            judgeResults?: components["schemas"]["JudgeResult"][];
        };
        /**
         * PostProblemRequest
         * @description 回答の提出リクエスト
         */
        PostSubmissionRequest: {
            /** @description 提出コードの言語ID */
            languageId?: number;
            /** @description ソースコード */
            source?: string;
        };
        /**
         * EditorialSummary
         * @description 解説
         */
        EditorialSummary: {
            /** @description 解説ID */
            id?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt?: string;
            /** @description 投稿者のユーザーID */
            authorId?: number;
            /** @description 解説が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic?: boolean;
        };
        /**
         * EditorialSummaries
         * @description 解説一覧
         */
        EditorialSummaries: components["schemas"]["EditorialSummary"][];
        /**
         * Editorial
         * @description 解説の詳細
         */
        Editorial: {
            /** @description 解説ID */
            id: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt?: string;
            /** @description 投稿者のユーザーID */
            authorId: number;
            /** @description 解説本文 (HTML) */
            statement: string;
            /** @description 解説が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic: boolean;
        };
        /**
         * PostEditorialRequest
         * @description 解説の作成リクエスト
         */
        PostEditorialRequest: {
            /** @description 解説本文 (HTML) */
            statement: string;
            /** @description 解説が全体公開かどうか.
             *
             *     * `true` - 公開
             *     * `false` - 非公開 (問題の作者のみ閲覧可) */
            isPublic: boolean;
        };
        /**
         * PutEditorialRequest
         * @description 解説の変更リクエスト.
         */
        PutEditorialRequest: {
            /** @description 解説本文 (HTML) */
            statement?: string;
            /** @description 公開されているかどうか */
            isPublic?: boolean;
        };
        /**
         * Signup
         * @description email+password登録
         */
        Signup: {
            userName: string;
            password: string;
            token: string;
        };
        /**
         * SignupRequest
         * @description Signupのリクエスト
         */
        SignupRequest: {
            /** Format: email */
            email: string;
        };
        /** Email */
        Email: {
            /** Format: email */
            email: string;
        };
        /**
         * UserEmailAndPassword
         * @description login
         */
        UserEmailAndPassword: {
            /** Format: email */
            email: string;
            password: string;
        };
        /** ResetPasswordRequest */
        ResetPasswordRequest: {
            password: string;
            token: string;
        };
        /**
         * JudgeStatus
         * @description ジャッジの状態
         *
         *     * `AC` - 正解
         *     * `WA` - 不正解
         *     * `CE` - コンパイルエラー
         *     * `IE` - 内部エラー
         *     * `MLE` - メモリ制限超過
         *     * `RE` - 実行時エラー
         *     * `TLE` - 実行時間超過
         *     * `WJ` - ジャッジ待ち
         * @enum {string}
         */
        JudgeStatus: "AC" | "WA" | "CE" | "IE" | "MLE" | "RE" | "TLE" | "WJ";
        /**
         * JudgeResult
         * @description ジャッジ結果
         */
        JudgeResult: {
            testcaseId: string;
            testcaseName?: string;
            judgeStatus: components["schemas"]["JudgeStatus"];
            score: number;
            time: number;
            memory: number;
        };
        /**
         * Role
         * @description ユーザの役割
         *
         *     * `Admin` - Admin
         *     * `traPUser` - AdminでないtraP部員
         *     * `CommonUser` - Adminでない一般ユーザー(traP部員以外のユーザー)
         * @enum {string}
         */
        Role: "Admin" | "traPUser" | "CommonUser";
        /**
         * Testcase
         * @description テストケース
         */
        Testcase: {
            name: string;
            id: string;
            testInput: string;
            testOutput: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /**
         * PostTestcasesRequest
         * @description テストケースの投稿
         */
        PostTestcaseRequest: {
            name: string;
            testInput: string;
            testOutput: string;
        }[];
        /**
         * PutTestcaseRequest
         * @description 単体のテストケースの編集
         */
        PutTestcaseRequest: {
            name: string;
            testInput: string;
            testOutput: string;
        };
        /** TestcaseSummary */
        TestcaseSummary: {
            id?: string;
            name?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** TestcaseSummaries */
        TestcaseSummaries: {
            testcaseSummaries?: components["schemas"]["TestcaseSummary"][];
        };
        /**
         * Language
         * @description プログラミング言語についての情報
         */
        Language: {
            id: number;
            name: string;
        };
    };
    responses: never;
    parameters: {
        /** @description 問題ID */
        problemIdInPath: string;
        /** @description 問題一覧の並び替え
         *
         *     `Asc` は昇順, `Desc` は降順を示す.
         *
         *     * `createdAtAsc` - 提出日時の昇順
         *     * `createdAtDesc` - 提出日時の降順
         *     * `updatedAtAsc` - 更新日時の昇順
         *     * `updatedAtDesc` - 更新日時の降順
         *     * `difficultyAsc` - 難易度の昇順
         *     * `difficultyDesc` - 難易度の降順 */
        problemsOrderByInQuery: "createdAtAsc" | "createdAtDesc" | "updatedAtAsc" | "updatedAtDesc" | "difficultyAsc" | "difficultyDesc";
        /** @description 提出ID */
        submissionIdInPath: number;
        /** @description 提出一覧の並び替え
         *
         *     `Asc` は昇順, `Desc` は降順を示す.
         *
         *     * `submittedAtAsc` - 提出日時（昇順）
         *     * `submittedAtDesc` - 提出日時（降順）
         *     * `timeConsumptionAsc` - 実行時間（昇順）
         *     * `timeConsumptionDesc` - 実行時間（降順）
         *     * `scoreAsc` - スコア（昇順）
         *     * `scoreDesc` - スコア（降順）
         *     * `memoryConsumptionAsc` - メモリ量（昇順）
         *     * `memoryConsumptionDesc` - メモリ量（降順）
         *     * `codeLengthAsc` - コード長（昇順）
         *     * `codeLengthDesc` - コード長（降順） */
        submissionsOrderByInQuery: "submittedAtAsc" | "submittedAtDesc" | "timeConsumptionAsc" | "timeConsumptionDesc" | "scoreAsc" | "scoreDesc" | "memoryConsumptionAsc" | "memoryConsumptionDesc" | "codeLengthAsc" | "codeLengthDesc";
        /** @description 取得数の上限 */
        limitInQuery: number;
        /** @description 取得の開始位置 */
        offsetInQuery: number;
        /** @description ジャッジ結果 */
        judgeStatusInQuery: components["schemas"]["JudgeStatus"];
        /** @description ソースコードの言語 */
        codeLanguageInQuery: string;
        /** @description ユーザー名 */
        userNameInQuery: string;
        /** @description ユーザーID */
        userIdInQuery: string;
        /** @description ユーザーID */
        userIdInPath: string;
        /** @description 解説ID */
        editorialIdInPath: string;
        /** @description パスワードリセットまたはメールアドレス変更の際に使われるJWT。
         *     次のフィールドを持つ:
         *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
         *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
         *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
         *     - `userId` (string): ユーザーのID。
         *     - `email` (string): ユーザーのメールアドレス。
         *     - `action` (string): トークンのアクションタイプ。`reset_password`または`change_email`。 */
        JWTWithUserId: string;
        /** @description 初回のユーザー登録(メールアドレスの登録)の際に使われるJWT。
         *     次のフィールドを持つ:
         *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
         *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
         *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
         *     - `email` (string): ユーザーのメールアドレス。
         *     - `action` (string): トークンのアクションタイプ。`register_email`。 */
        JWTWithoutUserId: string;
        /** @description テストケースID */
        testcaseIdInPath: string;
        /** @description 問題のID */
        problemIdInQuery: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getEditorial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 解説ID */
                editorialId: components["parameters"]["editorialIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Editorial"];
                };
            };
            /** @description 解説が存在しません(または解説の閲覧権限がありません) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putEditorial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 解説ID */
                editorialId: components["parameters"]["editorialIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PutEditorialRequest"];
            };
        };
        responses: {
            /** @description 正常に変更されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     解説を変更する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     解説が存在しません. (または解説の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEditorial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 解説ID */
                editorialId: components["parameters"]["editorialIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正常に削除されました. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     解説を削除する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     解説が存在しません. (または解説の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTestcase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テストケースID */
                testcaseId: components["parameters"]["testcaseIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Testcase"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putTestcase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テストケースID */
                testcaseId: components["parameters"]["testcaseIdInPath"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutTestcaseRequest"];
            };
        };
        responses: {
            /** @description 正常に変更されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTestcase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description テストケースID */
                testcaseId: components["parameters"]["testcaseIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正常に削除されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProblems: {
        parameters: {
            query?: {
                /** @description 取得数の上限 */
                limit?: components["parameters"]["limitInQuery"];
                /** @description 取得の開始位置 */
                offset?: components["parameters"]["offsetInQuery"];
                /** @description 問題一覧の並び替え
                 *
                 *     `Asc` は昇順, `Desc` は降順を示す.
                 *
                 *     * `createdAtAsc` - 提出日時の昇順
                 *     * `createdAtDesc` - 提出日時の降順
                 *     * `updatedAtAsc` - 更新日時の昇順
                 *     * `updatedAtDesc` - 更新日時の降順
                 *     * `difficultyAsc` - 難易度の昇順
                 *     * `difficultyDesc` - 難易度の降順 */
                orderBy?: components["parameters"]["problemsOrderByInQuery"];
                /** @description ユーザー名 */
                username?: components["parameters"]["userNameInQuery"];
                /** @description ユーザーID */
                userId?: components["parameters"]["userIdInQuery"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemSummaries"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postProblem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostProblemRequest"];
            };
        };
        responses: {
            /** @description OK
             *     問題が投稿されました. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Problem"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProblem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Problem"];
                };
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putProblem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PutProblemRequest"];
            };
        };
        responses: {
            /** @description 正常に変更されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     問題を編集する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteProblem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正常に削除されました. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     問題を削除する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEditorialsOnProblem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditorialSummaries"];
                };
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postEditorial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostEditorialRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Editorial"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     解説を投稿する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTestcases: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestcaseSummaries"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postTestcases: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: components["parameters"]["problemIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostTestcaseRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestcaseSummaries"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     解説を投稿する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     問題が存在しません. (または問題の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 問題ID */
                problemId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PostSubmissionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Submission"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden
             *     ソースコードを提出する権限がありません. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found
             *     提出が存在しません. (または提出の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSubmissions: {
        parameters: {
            query?: {
                /** @description 提出一覧の並び替え
                 *
                 *     `Asc` は昇順, `Desc` は降順を示す.
                 *
                 *     * `submittedAtAsc` - 提出日時（昇順）
                 *     * `submittedAtDesc` - 提出日時（降順）
                 *     * `timeConsumptionAsc` - 実行時間（昇順）
                 *     * `timeConsumptionDesc` - 実行時間（降順）
                 *     * `scoreAsc` - スコア（昇順）
                 *     * `scoreDesc` - スコア（降順）
                 *     * `memoryConsumptionAsc` - メモリ量（昇順）
                 *     * `memoryConsumptionDesc` - メモリ量（降順）
                 *     * `codeLengthAsc` - コード長（昇順）
                 *     * `codeLengthDesc` - コード長（降順） */
                orderBy?: components["parameters"]["submissionsOrderByInQuery"];
                /** @description ジャッジ結果 */
                status?: components["parameters"]["judgeStatusInQuery"];
                /** @description ソースコードの言語 */
                language?: components["parameters"]["codeLanguageInQuery"];
                /** @description ユーザー名 */
                username?: components["parameters"]["userNameInQuery"];
                /** @description ユーザーID */
                userId?: components["parameters"]["userIdInQuery"];
                /** @description 取得数の上限 */
                limit?: components["parameters"]["limitInQuery"];
                /** @description 取得の開始位置 */
                offset?: components["parameters"]["offsetInQuery"];
                /** @description 問題のID */
                problemIdInQuery?: components["parameters"]["problemIdInQuery"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionSummaries"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 提出ID */
                submissionId: components["parameters"]["submissionIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Submission"];
                };
            };
            /** @description Not Found
             *     提出が存在しません. (または提出の閲覧権限がありません.) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーID */
                userId: components["parameters"]["userIdInPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Not Found
             *     ユーザーが存在しません. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized
             *     ログインしていません. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putUsersMeIcon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PutMeRequest"];
            };
        };
        responses: {
            /** @description 正常に更新されました */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description 不正なリクエストです */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putMeEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Email"];
            };
        };
        responses: {
            /** @description 正常に更新されました　メール認証を行なってください */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 不正なリクエストです */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putUsersMePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PutPasswordRequest"];
            };
        };
        responses: {
            /** @description 正常に更新されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 不正なリクエストです */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSignupRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description 認証用のURLを送信しました　メール認証を行なってください */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 不正なリクエストです　メールアドレスの形式を確認してください */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postSignup: {
        parameters: {
            query?: {
                /** @description 初回のユーザー登録(メールアドレスの登録)の際に使われるJWT。
                 *     次のフィールドを持つ:
                 *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
                 *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
                 *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
                 *     - `email` (string): ユーザーのメールアドレス。
                 *     - `action` (string): トークンのアクションタイプ。`register_email`。 */
                "token-without-userid"?: components["parameters"]["JWTWithoutUserId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Signup"];
            };
        };
        responses: {
            /** @description 正常にユーザーを作成できました　メール認証を行なってください */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 不正なリクエストです */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserEmailAndPassword"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 不正なリクエストです　ユーザー名とパスワードを確認してください */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postLogout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postRequestResetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Email"];
            };
        };
        responses: {
            /** @description 正常にリセットメールを送信しました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    postResetPassword: {
        parameters: {
            query?: {
                /** @description パスワードリセットまたはメールアドレス変更の際に使われるJWT。
                 *     次のフィールドを持つ:
                 *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
                 *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
                 *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
                 *     - `userId` (string): ユーザーのID。
                 *     - `email` (string): ユーザーのメールアドレス。
                 *     - `action` (string): トークンのアクションタイプ。`reset_password`または`change_email`。 */
                "token-with-userid"?: components["parameters"]["JWTWithUserId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description 正常に更新されました */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActivate: {
        parameters: {
            query?: {
                /** @description パスワードリセットまたはメールアドレス変更の際に使われるJWT。
                 *     次のフィールドを持つ:
                 *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
                 *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
                 *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
                 *     - `userId` (string): ユーザーのID。
                 *     - `email` (string): ユーザーのメールアドレス。
                 *     - `action` (string): トークンのアクションタイプ。`reset_password`または`change_email`。 */
                "token-with-userid"?: components["parameters"]["JWTWithUserId"];
                /** @description 初回のユーザー登録(メールアドレスの登録)の際に使われるJWT。
                 *     次のフィールドを持つ:
                 *     - `exp` (int): トークンの有効期限（UNIXタイムスタンプ）。
                 *     - `iat` (int): トークンが発行された時刻（UNIXタイムスタンプ）。
                 *     - `nbf` (int): トークンが有効となる最早時刻（UNIXタイムスタンプ）。
                 *     - `email` (string): ユーザーのメールアドレス。
                 *     - `action` (string): トークンのアクションタイプ。`register_email`。 */
                "token-without-userid"?: components["parameters"]["JWTWithoutUserId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description メールアドレスが正常に有効化されました */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid token or bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized or expired token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getGoogleAuthParams: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正しいURLが返されました */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    getgithubAuthParams: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正しいURLが返されました */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    revokeTraqAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access token to be revoked */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The access token to revoke */
                    token: string;
                };
            };
        };
        responses: {
            /** @description トークンは正常に削除されました */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request or token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid token or request */
                        message?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    revokeGoogleAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access token to be revoked */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The access token to revoke */
                    token: string;
                };
            };
        };
        responses: {
            /** @description トークンは正常に削除されました */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request or token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid token or request */
                        message?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    revokeGithubAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Access token to be revoked */
        requestBody: {
            content: {
                "application/json": {
                    /** @description The access token to revoke */
                    token: string;
                };
            };
        };
        responses: {
            /** @description トークンは正常に削除されました */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request or token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Invalid token or request */
                        message?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    getLanguages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
