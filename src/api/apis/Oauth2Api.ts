/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetGoogleAuthParams200Response,
  GetGoogleAuthParams500Response,
  RevokeTraqAuth400Response,
  RevokeTraqAuthRequest,
} from '../models/index';
import {
    GetGoogleAuthParams200ResponseFromJSON,
    GetGoogleAuthParams200ResponseToJSON,
    GetGoogleAuthParams500ResponseFromJSON,
    GetGoogleAuthParams500ResponseToJSON,
    RevokeTraqAuth400ResponseFromJSON,
    RevokeTraqAuth400ResponseToJSON,
    RevokeTraqAuthRequestFromJSON,
    RevokeTraqAuthRequestToJSON,
} from '../models/index';

export interface RevokeGithubAuthRequest {
    revokeTraqAuthRequest: RevokeTraqAuthRequest;
}

export interface RevokeGoogleAuthRequest {
    revokeTraqAuthRequest: RevokeTraqAuthRequest;
}

export interface RevokeTraqAuthOperationRequest {
    revokeTraqAuthRequest: RevokeTraqAuthRequest;
}

/**
 * 
 */
export class Oauth2Api extends runtime.BaseAPI {

    /**
     * GoogleOAuthのためのエンドポイント
     * getGoogleOAuth2Params
     */
    async getGoogleAuthParamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoogleAuthParams200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/google-oauth2/params`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoogleAuthParams200ResponseFromJSON(jsonValue));
    }

    /**
     * GoogleOAuthのためのエンドポイント
     * getGoogleOAuth2Params
     */
    async getGoogleAuthParams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoogleAuthParams200Response> {
        const response = await this.getGoogleAuthParamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * GitHubOAuthのためのエンドポイント
     * getGithubOAuth2Params
     */
    async getgithubAuthParamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoogleAuthParams200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/github-oauth2/params`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoogleAuthParams200ResponseFromJSON(jsonValue));
    }

    /**
     * GitHubOAuthのためのエンドポイント
     * getGithubOAuth2Params
     */
    async getgithubAuthParams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoogleAuthParams200Response> {
        const response = await this.getgithubAuthParamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * GithubOAuthのトークンを削除する
     * postGithubOAuth2Revoke
     */
    async revokeGithubAuthRaw(requestParameters: RevokeGithubAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['revokeTraqAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeTraqAuthRequest',
                'Required parameter "revokeTraqAuthRequest" was null or undefined when calling revokeGithubAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/github-oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeTraqAuthRequestToJSON(requestParameters['revokeTraqAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * GithubOAuthのトークンを削除する
     * postGithubOAuth2Revoke
     */
    async revokeGithubAuth(requestParameters: RevokeGithubAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeGithubAuthRaw(requestParameters, initOverrides);
    }

    /**
     * GoogleOAuthのトークンを削除する
     * postGoogleOAuth2Revoke
     */
    async revokeGoogleAuthRaw(requestParameters: RevokeGoogleAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['revokeTraqAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeTraqAuthRequest',
                'Required parameter "revokeTraqAuthRequest" was null or undefined when calling revokeGoogleAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/google-oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeTraqAuthRequestToJSON(requestParameters['revokeTraqAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * GoogleOAuthのトークンを削除する
     * postGoogleOAuth2Revoke
     */
    async revokeGoogleAuth(requestParameters: RevokeGoogleAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeGoogleAuthRaw(requestParameters, initOverrides);
    }

    /**
     * traQOAuthのトークンを削除する
     * postTraqOAuth2Revoke
     */
    async revokeTraqAuthRaw(requestParameters: RevokeTraqAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['revokeTraqAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'revokeTraqAuthRequest',
                'Required parameter "revokeTraqAuthRequest" was null or undefined when calling revokeTraqAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/traq-oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevokeTraqAuthRequestToJSON(requestParameters['revokeTraqAuthRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * traQOAuthのトークンを削除する
     * postTraqOAuth2Revoke
     */
    async revokeTraqAuth(requestParameters: RevokeTraqAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeTraqAuthRaw(requestParameters, initOverrides);
    }

}
