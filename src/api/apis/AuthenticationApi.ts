/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Email,
  ResetPasswordRequest,
  Signup,
  SignupRequest,
  UserEmailAndPassword,
} from '../models/index';
import {
    EmailFromJSON,
    EmailToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    SignupFromJSON,
    SignupToJSON,
    SignupRequestFromJSON,
    SignupRequestToJSON,
    UserEmailAndPasswordFromJSON,
    UserEmailAndPasswordToJSON,
} from '../models/index';

export interface PostLoginRequest {
    userEmailAndPassword?: UserEmailAndPassword;
}

export interface PostRequestResetPasswordRequest {
    email?: Email;
}

export interface PostResetPasswordRequest {
    tokenWithUserid?: string;
    resetPasswordRequest?: ResetPasswordRequest;
}

export interface PostSignupRequest {
    tokenWithoutUserid?: string;
    signup?: Signup;
}

export interface PostSignupRequestRequest {
    signupRequest?: SignupRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * ログイン
     * postLogin
     */
    async postLoginRaw(requestParameters: PostLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserEmailAndPasswordToJSON(requestParameters['userEmailAndPassword']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン
     * postLogin
     */
    async postLogin(requestParameters: PostLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLoginRaw(requestParameters, initOverrides);
    }

    /**
     * ログアウト
     * postLogout
     */
    async postLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログアウト
     * postLogout
     */
    async postLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLogoutRaw(initOverrides);
    }

    /**
     * パスワード変更のリクエスト リクエストを受け取ったら`/reset-password?token=JWT`のような形式のエンドポイントを含むメールをバックエンドからユーザーに送る。 ユーザーがそれをクリックするとリセット用画面に遷移する。
     * postResetPasswordReset
     */
    async postRequestResetPasswordRaw(requestParameters: PostRequestResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset-password/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailToJSON(requestParameters['email']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * パスワード変更のリクエスト リクエストを受け取ったら`/reset-password?token=JWT`のような形式のエンドポイントを含むメールをバックエンドからユーザーに送る。 ユーザーがそれをクリックするとリセット用画面に遷移する。
     * postResetPasswordReset
     */
    async postRequestResetPassword(requestParameters: PostRequestResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRequestResetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 新しいパスワードをPOSTする
     * postResetPassword
     */
    async postResetPasswordRaw(requestParameters: PostResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['tokenWithUserid'] != null) {
            queryParameters['token-with-userid'] = requestParameters['tokenWithUserid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 新しいパスワードをPOSTする
     * postResetPassword
     */
    async postResetPassword(requestParameters: PostResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postResetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * email+passwordによるユーザー登録 クエリパラメタにtokenを持ち，それでメール情報を管理する リクエストを受け取ったら`/activate?payload=JWT`のような形式のメール有効化用エンドポイントを含むメールをバックエンドからユーザーに送る。 ユーザーがそのアドレスをクリックしたら，メール有効化処理をし，適切に終了したらログイン画面にリダイレクトする。
     * postSignup
     */
    async postSignupRaw(requestParameters: PostSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['tokenWithoutUserid'] != null) {
            queryParameters['token-without-userid'] = requestParameters['tokenWithoutUserid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupToJSON(requestParameters['signup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * email+passwordによるユーザー登録 クエリパラメタにtokenを持ち，それでメール情報を管理する リクエストを受け取ったら`/activate?payload=JWT`のような形式のメール有効化用エンドポイントを含むメールをバックエンドからユーザーに送る。 ユーザーがそのアドレスをクリックしたら，メール有効化処理をし，適切に終了したらログイン画面にリダイレクトする。
     * postSignup
     */
    async postSignup(requestParameters: PostSignupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSignupRaw(requestParameters, initOverrides);
    }

    /**
     * メールアドレスを渡し，そこに認証用のリンクを送る。
     * postSignupRequest
     */
    async postSignupRequestRaw(requestParameters: PostSignupRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestToJSON(requestParameters['signupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メールアドレスを渡し，そこに認証用のリンクを送る。
     * postSignupRequest
     */
    async postSignupRequest(requestParameters: PostSignupRequestRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSignupRequestRaw(requestParameters, initOverrides);
    }

}
