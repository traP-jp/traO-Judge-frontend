/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Email,
  PutMeRequest,
  PutPasswordRequest,
  User,
} from '../models/index';
import {
    EmailFromJSON,
    EmailToJSON,
    PutMeRequestFromJSON,
    PutMeRequestToJSON,
    PutPasswordRequestFromJSON,
    PutPasswordRequestToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface PutMeEmailRequest {
    email?: Email;
}

export interface PutUsersMeIconRequest {
    putMeRequest?: PutMeRequest;
}

export interface PutUsersMePasswordRequest {
    putPasswordRequest?: PutPasswordRequest;
}

/**
 * 
 */
export class MeApi extends runtime.BaseAPI {

    /**
     * 自身の情報を取得する
     * getMe
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 自身の情報を取得する
     * getMe
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * メール情報を書き換える メール情報を書き換えた後はメール認証が必要である
     * putMeEmail
     */
    async putMeEmailRaw(requestParameters: PutMeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailToJSON(requestParameters['email']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メール情報を書き換える メール情報を書き換えた後はメール認証が必要である
     * putMeEmail
     */
    async putMeEmail(requestParameters: PutMeEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putMeEmailRaw(requestParameters, initOverrides);
    }

    /**
     * アイコンなど自身に関連する情報の編集をします
     * putMe
     */
    async putUsersMeIconRaw(requestParameters: PutUsersMeIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutMeRequestToJSON(requestParameters['putMeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * アイコンなど自身に関連する情報の編集をします
     * putMe
     */
    async putUsersMeIcon(requestParameters: PutUsersMeIconRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.putUsersMeIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログイン後にパスワードを変更する
     * putUserMePassword
     */
    async putUsersMePasswordRaw(requestParameters: PutUsersMePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/me/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPasswordRequestToJSON(requestParameters['putPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ログイン後にパスワードを変更する
     * putUserMePassword
     */
    async putUsersMePassword(requestParameters: PutUsersMePasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putUsersMePasswordRaw(requestParameters, initOverrides);
    }

}
