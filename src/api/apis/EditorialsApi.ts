/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Editorial,
  EditorialSummary,
  PostEditorialRequest,
  PutEditorialRequest,
} from '../models/index';
import {
    EditorialFromJSON,
    EditorialToJSON,
    EditorialSummaryFromJSON,
    EditorialSummaryToJSON,
    PostEditorialRequestFromJSON,
    PostEditorialRequestToJSON,
    PutEditorialRequestFromJSON,
    PutEditorialRequestToJSON,
} from '../models/index';

export interface DeleteEditorialRequest {
    editorialId: string;
}

export interface GetEditorialRequest {
    editorialId: string;
}

export interface GetEditorialsOnProblemRequest {
    problemId: string;
}

export interface PostEditorialOperationRequest {
    problemId: string;
    postEditorialRequest?: PostEditorialRequest;
}

export interface PutEditorialOperationRequest {
    editorialId: string;
    putEditorialRequest?: PutEditorialRequest;
}

/**
 * 
 */
export class EditorialsApi extends runtime.BaseAPI {

    /**
     * 個別の解説を削除する
     * deleteEditorial
     */
    async deleteEditorialRaw(requestParameters: DeleteEditorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['editorialId'] == null) {
            throw new runtime.RequiredError(
                'editorialId',
                'Required parameter "editorialId" was null or undefined when calling deleteEditorial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/editorials/{editorialId}`.replace(`{${"editorialId"}}`, encodeURIComponent(String(requestParameters['editorialId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 個別の解説を削除する
     * deleteEditorial
     */
    async deleteEditorial(requestParameters: DeleteEditorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEditorialRaw(requestParameters, initOverrides);
    }

    /**
     * 個別の解説を取得する
     * getEditorial
     */
    async getEditorialRaw(requestParameters: GetEditorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Editorial>> {
        if (requestParameters['editorialId'] == null) {
            throw new runtime.RequiredError(
                'editorialId',
                'Required parameter "editorialId" was null or undefined when calling getEditorial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/editorials/{editorialId}`.replace(`{${"editorialId"}}`, encodeURIComponent(String(requestParameters['editorialId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditorialFromJSON(jsonValue));
    }

    /**
     * 個別の解説を取得する
     * getEditorial
     */
    async getEditorial(requestParameters: GetEditorialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Editorial> {
        const response = await this.getEditorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ある問題の全ての解説を取得する
     * getEditorialsOnProblem
     */
    async getEditorialsOnProblemRaw(requestParameters: GetEditorialsOnProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EditorialSummary>>> {
        if (requestParameters['problemId'] == null) {
            throw new runtime.RequiredError(
                'problemId',
                'Required parameter "problemId" was null or undefined when calling getEditorialsOnProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problems/{problemId}/editorials`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters['problemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EditorialSummaryFromJSON));
    }

    /**
     * ある問題の全ての解説を取得する
     * getEditorialsOnProblem
     */
    async getEditorialsOnProblem(requestParameters: GetEditorialsOnProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EditorialSummary>> {
        const response = await this.getEditorialsOnProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 解説を投稿する
     * postEditorial
     */
    async postEditorialRaw(requestParameters: PostEditorialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Editorial>> {
        if (requestParameters['problemId'] == null) {
            throw new runtime.RequiredError(
                'problemId',
                'Required parameter "problemId" was null or undefined when calling postEditorial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problems/{problemId}/editorials`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters['problemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostEditorialRequestToJSON(requestParameters['postEditorialRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditorialFromJSON(jsonValue));
    }

    /**
     * 解説を投稿する
     * postEditorial
     */
    async postEditorial(requestParameters: PostEditorialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Editorial> {
        const response = await this.postEditorialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 個別の解説を変更する
     * putEditorial
     */
    async putEditorialRaw(requestParameters: PutEditorialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['editorialId'] == null) {
            throw new runtime.RequiredError(
                'editorialId',
                'Required parameter "editorialId" was null or undefined when calling putEditorial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editorials/{editorialId}`.replace(`{${"editorialId"}}`, encodeURIComponent(String(requestParameters['editorialId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutEditorialRequestToJSON(requestParameters['putEditorialRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 個別の解説を変更する
     * putEditorial
     */
    async putEditorial(requestParameters: PutEditorialOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putEditorialRaw(requestParameters, initOverrides);
    }

}
