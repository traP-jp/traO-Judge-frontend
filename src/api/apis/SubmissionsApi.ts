/* tslint:disable */
/* eslint-disable */
/**
 * traO Judge API
 * traO Judge API (front ↔ back)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JudgeStatus,
  PostSubmissionRequest,
  Submission,
  SubmissionSummaries,
} from '../models/index';
import {
    JudgeStatusFromJSON,
    JudgeStatusToJSON,
    PostSubmissionRequestFromJSON,
    PostSubmissionRequestToJSON,
    SubmissionFromJSON,
    SubmissionToJSON,
    SubmissionSummariesFromJSON,
    SubmissionSummariesToJSON,
} from '../models/index';

export interface GetSubmissionRequest {
    submissionId: number;
}

export interface GetSubmissionsRequest {
    orderBy?: GetSubmissionsOrderByEnum;
    status?: JudgeStatus;
    language?: string;
    username?: string;
    userId?: string;
    limit?: number;
    offset?: number;
    problemIdInQuery?: string;
}

export interface PostSubmissionOperationRequest {
    problemId: number;
    postSubmissionRequest?: PostSubmissionRequest;
}

/**
 * 
 */
export class SubmissionsApi extends runtime.BaseAPI {

    /**
     * 個別の提出を取得する
     * getSubmission
     */
    async getSubmissionRaw(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['submissionId'] == null) {
            throw new runtime.RequiredError(
                'submissionId',
                'Required parameter "submissionId" was null or undefined when calling getSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions/{submissionId}`.replace(`{${"submissionId"}}`, encodeURIComponent(String(requestParameters['submissionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * 個別の提出を取得する
     * getSubmission
     */
    async getSubmission(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.getSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 全ての提出を取得
     * getSubmissions
     */
    async getSubmissionsRaw(requestParameters: GetSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubmissionSummaries>> {
        const queryParameters: any = {};

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['problemIdInQuery'] != null) {
            queryParameters['problemIdInQuery'] = requestParameters['problemIdInQuery'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionSummariesFromJSON(jsonValue));
    }

    /**
     * 全ての提出を取得
     * getSubmissions
     */
    async getSubmissions(requestParameters: GetSubmissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmissionSummaries> {
        const response = await this.getSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ソースコードを提出する
     * postSubmission
     */
    async postSubmissionRaw(requestParameters: PostSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Submission>> {
        if (requestParameters['problemId'] == null) {
            throw new runtime.RequiredError(
                'problemId',
                'Required parameter "problemId" was null or undefined when calling postSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problems/{problemId}/submissions`.replace(`{${"problemId"}}`, encodeURIComponent(String(requestParameters['problemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSubmissionRequestToJSON(requestParameters['postSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubmissionFromJSON(jsonValue));
    }

    /**
     * ソースコードを提出する
     * postSubmission
     */
    async postSubmission(requestParameters: PostSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Submission> {
        const response = await this.postSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetSubmissionsOrderByEnum = {
    SubmittedAtAsc: 'submittedAtAsc',
    SubmittedAtDesc: 'submittedAtDesc',
    TimeConsumptionAsc: 'timeConsumptionAsc',
    TimeConsumptionDesc: 'timeConsumptionDesc',
    ScoreAsc: 'scoreAsc',
    ScoreDesc: 'scoreDesc',
    MemoryConsumptionAsc: 'memoryConsumptionAsc',
    MemoryConsumptionDesc: 'memoryConsumptionDesc',
    CodeLengthAsc: 'codeLengthAsc',
    CodeLengthDesc: 'codeLengthDesc'
} as const;
export type GetSubmissionsOrderByEnum = typeof GetSubmissionsOrderByEnum[keyof typeof GetSubmissionsOrderByEnum];
